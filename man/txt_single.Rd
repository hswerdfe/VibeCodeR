% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/util.R
\name{txt_single}
\alias{txt_single}
\title{Collapse a String Vector into a Single String with Newlines}
\usage{
txt_single(x, new_line = "\\n")
}
\arguments{
\item{x}{A character vector to be processed.}

\item{new_line}{The newline character used for splitting and collapsing the strings.
Defaults to `'\\n'`.}
}
\value{
A character string representing the collapsed input, with all elements separated by the
  specified newline character.
}
\description{
Converts a character vector into a single string with newlines.
}
\details{
This function takes a character vector, splits each element by a specified newline character,
and then collapses the resulting vector into a single string, using the same newline character
as a separator. This effectively ensures that the input, potentially containing multiple
lines, is represented as a single string with consistent newline formatting.

The function first splits each string in the input vector `x` by the `new_line` character.
  It then unlists the resulting list into a character vector and collapses it back into a single
  string, using `new_line` as the separator. This is useful for handling text data where
  newline characters might be inconsistent or need standardization. The default newline character
  is `'\\n'`.
}
\examples{
\dontrun{
# Basic usage with default newline character
txt_single(c("line1", "line2", "line3"))

# Using a different newline character (e.g., carriage return)
txt_single(c("line1", "line2", "line3"), new_line = "\r")

# Handling multiple lines within a single string element
txt_single(c("line1\nline2", "line3"))

# Example with mixed newline characters (requires additional cleaning)
mixed_text <- c("line1\r\nline2", "line3\nline4")
# To handle mixed newlines, you might need to replace \r\n with \n first
cleaned_text <- stringr::str_replace_all(mixed_text, "\r\n", "\n")
txt_single(cleaned_text)
}
}
