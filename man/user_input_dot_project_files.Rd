% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/user_input_dot_project_files.R
\name{user_input_dot_project_files}
\alias{user_input_dot_project_files}
\title{Collect and Store Default Project Configuration Inputs}
\usage{
user_input_dot_project_files(
  path = here::here(),
  dialogName = "Default values to use with this project",
  path_coder = file.path(path, ".VibeCodeR")
)
}
\arguments{
\item{path}{Character. Path to the root of the project (default is `here::here()`).}

\item{dialogName}{Character. Title to be displayed on the user dialog box (default is `"Default values to use with this project"`).}

\item{path_coder}{Character.path to the place where the dot files will be saved. Defaults to path |> file.path('.VibeCodeR')}
}
\value{
(Invisibly) returns a named list of responses corresponding to the configuration fields.
}
\description{
Prompts the user (via a UI dialog) to input or confirm default values for various project configuration elements such as goals, style guides, roxygen prompts, unit test prompts, and preferred LLM service credentials. These values are saved as individual config files inside a `.VibeCodeR` directory within the given path.
}
\details{
This function creates and stores a set of default configuration files in a hidden `.VibeCodeR` directory within a project. These configurations include project goals, style guidelines, prompts for documentation and testing, and API service credentials. It presents a user-friendly dialog for input and saves responses to file for reuse.


The function ensures that consistent and reusable prompts or configuration values are collected at the start of a project. It checks for existing `.config` files, pre-populates the dialog fields with their contents if found, and writes new inputs back to those files. It's ideal for integration with LLM-based tooling or scaffolding systems.
}
\examples{
\dontrun{
  responses <- user_input_dot_project_files()
  responses$project_goals
}

}
\author{
Howard Swerdfeger
}
