% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/context_libraries.R
\name{functions_libraries_in_memmory}
\alias{functions_libraries_in_memmory}
\title{List Functions and Libraries Loaded in Memory}
\usage{
functions_libraries_in_memmory()
}
\arguments{
\item{None}{}
}
\value{
A character vector containing the names of functions loaded from attached packages, in the format "package::function".
}
\description{
Lists functions from loaded libraries in memory.
}
\details{
This function identifies and lists all functions currently loaded in memory from attached packages (excluding the base package).


The function iterates through the attached packages (excluding the base package), identifies the functions within each package's environment, and returns a vector of strings representing these functions in the format "package::function".

Implementation notes:
\itemize{
  \item Uses `search()` to get the list of attached packages.
  \item Filters out the "package:base" environment.
  \item Uses `ls()` to list objects within each package environment.
  \item Employs `tryCatch` to handle potential errors when checking if an object is a function.
  \item Returns a unique vector of function names in the format "package::function".
}

Usage patterns:
\itemize{
  \item To get a list of all functions loaded from attached packages.
  \item To identify which package a particular function is loaded from.
  \item To debug namespace issues and conflicts.
}
}
\examples{
\dontrun{
# Get a list of functions loaded from attached packages
loaded_functions <- functions_libraries_in_memmory()
print(loaded_functions)

# Check if a specific function is loaded
if ("dplyr::mutate" \%in\% loaded_functions) {
  print("dplyr::mutate is loaded")
} else {
  print("dplyr::mutate is not loaded")
}
}
}
